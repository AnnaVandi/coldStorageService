System coldstorageservice

//DICHIARAZIONE DEI MESSAGGI E DEGLI EVENTI

//Quando il truck driver fa una richiesta di store con un certo peso
Request storerequest       : storerequest(FW)
//Reply replyrequest     : replyrequest(TICKETNUM)
Reply ticketAccepted :ticketAccepted(TICKETNUMBER) for storerequest
Reply replyTicketDenied: ticketDenied(ARG) for storerequest

//Quando il truck driver arriva e chiede di scaricare immettendo il TICKETNUMBER
Request dischargefood  : dischargefood(TICKETNUM)
Reply replyChargeTaken : replyChargeTaken(ARG) for dischargefood
Reply replyTicketExpired:  replyTicketExpired(ARG) for dischargefood

//Messaggi definiti dal BasicRobot
Request 	engage				: 	engage(OWNER,STEPTIME)
Reply 		engagedone			:	engagedone(ARG) for engage
Reply 		engagerefused		: 	engagerefused(ARG) for engage

Dispatch 	disengage			: 	disengage(ARG)

Dispatch 	cmd					:	cmd(MOVE)
Dispatch 	end					: 	end(ARG)

Request 	step				: 	step(TIME)
Reply 		stepdone			: 	stepdone(V) for step
Reply 		stepfailed			: 	stepfailed(DURATION, CAUSE) for step

Request 	doplan				: 	doplan(PATH,OWNER,STEPTIME)
Reply 		doplandone			: 	doplandone(ARG) for doplan
Reply 		doplanfailed		:	doplanfailed(ARG) for doplan

Request 	moverobot			:	moverobot(TARGETX, TARGETY)
Reply 		moverobotdone		: 	moverobotok(ARG) for moverobot
Reply 		moverobotfailed		: 	moverobotfailed(PLANDONE,PLANTODO) for moverobot

Dispatch 	setrobotstate		: 	setpos(X,Y,D)
Dispatch 	setdirection		: 	dir(D) // up, down, left, right

Request 	getrobotstate		: 	getrobotstate(ARG)
Reply 		robotstate			: 	robotstate(POS,DIR) for getrobotstate

//MESSAGI TRA IL TRANSPORT TROLLEY E il COLD STORAGE
//manda trolley a servire un truck (da idle a serving)
Dispatch dischargeTrolley : dischargeTrolley(TICKETID)
//Dispatch truckArrived : truckArrived(TICKETID)
Dispatch chargeTaken : chargeTaken(TICKETID)



//quando il trolley Ã¨ alla coldRoom scarica aggiornando il peso (da serving a idle/serving)
Request discharged_trolley : discharged_trolley(TICKETID)
Reply idle_trolley : idle_trolley(D) for discharged_trolley
Reply serve_newtruck : serve_newtruck(TICKET) for discharged_trolley
//alarm


//richiedi se puo prenotare KG chilogrammi alla coldroom
Request spaceCheck : spaceCheck(KG)
Reply space_insufficient : space_insufficient(D) for spaceCheck
Reply space_reserved : space_reserved(D) for spaceCheck

Dispatch stored_food : stored_food(KG)


//Eventi di stop e resume per il transport trolley
Event alarm:alarm(X)
Event resume:resume(ARG)




//DICHIARAZIONE DEI CONTESTI
Context ctxcoldstorageservice ip [host="localhost" port=8055]
Context ctxbasicrobot ip [host="127.0.0.1" port=8020]

//MESSAGGI tra il transport trolley e il robot



// DICHIARAZIONE DEGLI ATTORI
QActor servicestatusgui context ctxcoldstorageservice{

  State s0 initial {
  }
}



QActor coldstorageservice context ctxcoldstorageservice{
	[#
	
	var Trolley_is_working : Boolean = false;
	var	KgtoLoad : Int = 0;
	var	Expiration : Long = 1000000;
	var List = tickets.TicketList(Expiration);
	var servingTicket = tickets.Ticket();
	var queuedTicket = tickets.Ticket();
	var is_queued : Boolean = false;
	var Ticketnum : Int = 0;
	#]



	//---------------------------------------------------------------------------------------------------------------
	//INITIALIZE THE COLD STORAGE SERVICE
	State s0 initial {
		
		println("$name ) waiting for a new message...") color magenta
		discardMsg Off

	  } Transition t0
	    whenRequest  storerequest->handleStoreRequest
	    whenRequest dischargefood->handleDischargeRequest
	    whenRequest discharged_trolley ->handleTrolley_atColdroom
	    whenMsg chargeTaken -> clearIndoor


 	//-------------------------------------------------------------------------------------------------------------
 	//ASK COLD ROOM HOW MANY KG ARE ALREADY INSIDE
	State handleStoreRequest{
			onMsg(storerequest:storerequest(KG)){
				[#
					KgtoLoad = payloadArg(0).toInt();
				#]

			 println("$name ) asking to coldRoom") color magenta
		    request coldroom -m spaceCheck : spaceCheck($KgtoLoad)
		    }
	} Transition t0
	whenReply space_reserved -> handleTicketGeneration
	whenReply space_insufficient -> refuseStoreReq

//------------------------------------------------------------------------------------------------------------------

	State refuseStoreReq{
			replyTo storerequest with replyTicketDenied : ticketDenied(D)
			println("$name ) ticket denied, not enough space.") color magenta

	}Goto s0
//------------------------------------------------------------------------------------------------------------------
   //TICKET GENERATION AND CURRENT LOAD CONTROL
  State handleTicketGeneration{
    onMsg( space_reserved : space_reserved(D) ){
    	[#
			var ticket=List.createTicket(KgtoLoad);
		    var TICKETCODE = ticket.getTicketNumber();
		    var TIMESTAMP = ticket.getTimestamp();

    		#]
    		replyTo storerequest with ticketAccepted : ticketAccepted($TICKETCODE,$TIMESTAMP)
    		println("$name ) ticket accepted! Ticket $TICKETCODE emitted. ") color magenta
    	}
    } Goto s0



   //-----------------------------------------------------------------------------------------------------------------
   //DISCHARGE AND TICKET CHECKING
  State handleDischargeRequest{
	    onMsg( dischargefood : dischargefood(TICKETNUM) ){
	      [#
	        Ticketnum = payloadArg(0).toInt();
	      	val ticket = List.getTicket(Ticketnum);
	      	var Expired : Boolean = List.isExpired(ticket);

	      #]
	      if [# !Expired  && !Trolley_is_working#]{
	      	println("$name ) Sending food to the cold room, lazzaro alzati e cammina") color magenta
	      	[#
	      		Trolley_is_working=true;
	      		servingTicket= ticket;
	      		ticket.setStatus(1)

	      	#]
	      	forward transporttrolley -m dischargeTrolley : dischargeTrolley($Ticketnum)
	      }
	      else {
	      	if [# !Expired #]{
		      	println("$name ) Truck is already serving another truck, let's queue the ticket $Ticketnum") color magenta
		      	[#
		      		queuedTicket=ticket;
		      		is_queued=true;
		      		ticket.setStatus(1)
		      	#]
	      	}
	      	else { 
	      		println("$name ) The ticket has expired... sending notification to SAGui") color magenta
	      		[#
	      			ticket.setStatus(2)
	      		#]
	      	}
	   	  }
	    }
    } Goto s0

  State handleTrolley_atColdroom{
	    onMsg( discharged_trolley : discharged_trolley(TICKETNUM) ){
		    	[#
		    		 Ticketnum = payloadArg(0).toInt();
		    		 val Kg : Int = servingTicket.getKgToStore();
	
		    	#]
		    	println("$name) received back discharged_trolley with id : $Ticketnum") color magenta
		    	 
		    	if [# servingTicket.getTicketNumber() == Ticketnum  && is_queued #]{
		    		
		    		[#
		    		servingTicket = queuedTicket;
		    		val ServingId : Int = servingTicket.getTicketNumber().toInt();
		    		is_queued=false;
	
		    		#]
		    		replyTo discharged_trolley with serve_newtruck : serve_newtruck($ServingId)
		    	}
		    	else {
		    		if[# servingTicket.getTicketNumber() == Ticketnum #]{
		    
		    			[#
			    		Trolley_is_working = false;
			    		#]
			    		replyTo discharged_trolley with idle_trolley : idle_trolley(D)
		    		}else{
			    		println("$name) Error! Not corresponding serving ticket") color magenta
			    	}
		    	}
		    	forward coldroom -m stored_food : stored_food($Kg)
		    	
	    }
    }Goto s0


  State clearIndoor{
    onMsg( chargeTaken : chargeTaken(D) ){
	  println("$name ) cleaning Indoor!!") color magenta
	  [# Ticketnum = payloadArg(0).toInt();#]
      replyTo dischargefood with replyChargeTaken : replyChargeTaken($Ticketnum)
    }
  } Goto s0
}

QActor serviceaccessgui context ctxcoldstorageservice{
    State s0 initial {


  }
}

QActor warningdevice context ctxcoldstorageservice{
 State s0 initial {
  }
}

QActor coldroom context ctxcoldstorageservice{

	[#
	val MAX_STG : Int =Configuration.conf.MAX_STG;
	var current_STG : Int =0;
	var reserved_STG : Int =0;
	#]
	State s0 initial {

		println("$name) I am started with a Maximum $MAX_STG, currently $current_STG !") color blue

	}Goto waiting_state

	State waiting_state {
		println("$name) Okay then, the storage is $current_STG kg, with a reserved $reserved_STG kg") color blue
	} Transition t2
	whenRequest spaceCheck  -> check_state
	whenMsg stored_food -> store_state


	State check_state{
		onMsg( spaceCheck : spaceCheck(KG)){
			[#
			var Kg : Int = payloadArg(0).toInt();
			#]
			if[# MAX_STG >= current_STG + reserved_STG + Kg#]{
				[#
				reserved_STG+=Kg;

				#]
				replyTo spaceCheck with space_reserved : space_reserved($Kg)

			}else{
				println("$name) not enough space for reservation...") color blue

				replyTo spaceCheck with space_insufficient : space_insufficient(D)
			}
		}
	} Goto waiting_state

	State store_state{
		onMsg( stored_food : stored_food(KG)){
			[#
			var Kg : Int = payloadArg(0).toInt();
			reserved_STG -= Kg;
			current_STG += Kg;
			#]
			println(" $name) Performed the load with success!") color blue
		}
	}Goto waiting_state
}

QActor alarmdevice context ctxcoldstorageservice{
State s0 initial {

  }
}

QActor transporttrolley context ctxcoldstorageservice{
	[# var lastState : String = ""
	var TicketID : String = ""
	#]
	State s0 initial {
		println("$name | init e engage basicrobot") color yellow

		request basicrobot -m engage : engage(transporttrolley,125)
	}
	Transition 	t0	whenReply engagedone -> engaged
					whenReply engagerefused -> quit

	State engaged {
		println("$name | basicrobot engaged") color yellow
	}
	Goto atHome

	State atHome{
		[# lastState = "atHome" #]

		println("$name | basicrobot at Home") color yellow
		//forward basicrobot -m setdirection : dir(down)


	}
	Transition t0
				whenMsg dischargeTrolley -> goingIndoor

	State goingIndoor {
		onMsg(dischargeTrolley : dischargeTrolley(Ticketnum)){
			
			[# lastState = "goingIndoor" 
				TicketID = payloadArg(0);
				#]
			println("$name | vado all'INDOOR") color yellow
			request basicrobot -m moverobot : moverobot (0,4)
			
			}
			onMsg(serve_newtruck : serve_newtruck(Ticketnum)){
			
			[# lastState = "goingIndoor" 
				TicketID = payloadArg(0);
				#]
			println("$name | vado all'INDOOR") color yellow
			request basicrobot -m moverobot : moverobot (0,4)
			
			}
	}
	Transition t0 whenReply moverobotdone -> atIndoor
	whenEvent alarm ->stopped

	State atIndoor {
		[# lastState = "atIndoor" #]

		println("$name | sono in INDOOR") color yellow
		println("$name | carico il cibo") color yellow
	}
	Transition t 	whenTime 3000 -> loadDone		// simula azione di carico

	State loadDone {
		forward coldstorageservice -m chargeTaken : chargeTaken($TicketID)
	}
	Goto goingColdroom

	State goingColdroom {
		[# lastState = "goingColdroom" #]
		println("$name | vado verso la cold room") color yellow
		request basicrobot -m moverobot : moverobot (4,3)
	}
	Transition t0 whenReply moverobotdone -> atColdroom
	whenEvent alarm ->stopped

	State atColdroom {
		[# lastState = "atColdroom" #]
		println("$name | sono in Cold Room") color yellow
	}
	Transition t0 whenTime 3000 	-> chargeStored	// simula azione deposito

	State chargeStored {
		[# lastState = "chargedStored" #]
		println("$name | terminato deposito. Aspetto istruzioni") color yellow
		request coldstorageservice -m discharged_trolley: discharged_trolley($TicketID)
	}
	Transition t0 whenReply idle_trolley -> goingHome
			      whenReply serve_newtruck -> goingIndoor

	State goingHome{
		[# lastState = "goingHome" #]
		println("$name | vado alla posizione HOME") color yellow
		request basicrobot -m moverobot : moverobot (0,0)
	}
	Transition t0 whenReply moverobotdone -> atHome
	whenEvent alarm ->stopped



	State stopped {
		discardMsg On
		println("$name | Sono fermo per ostacolo sonar") color yellow
	}
	Transition t0 whenEvent resume and [# lastState == "atHome" #] 		-> atHome
				  whenEvent resume and [# lastState == "goingIndoor" #] 	-> goingIndoor
				  whenEvent resume and [# lastState == "atIndoor" #] 	-> atIndoor
				  whenEvent resume and [# lastState == "goingColdroom" #] 	-> goingColdroom
				  whenEvent resume and [# lastState == "atColdroom" #] 	-> atColdroom
				  whenEvent resume and [# lastState == "chargeStored" #] 	-> chargeStored
				  whenEvent resume and [# lastState == "goingHome" #] 		-> goingHome

	State quit {
		forward basicrobot -m disengage : disengage(transporttrolley)
		[# System.exit(0) #]
	}
}

ExternalQActor basicrobot context ctxbasicrobot