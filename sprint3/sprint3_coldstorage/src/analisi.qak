System coldstorageservice_anal
 
//DICHIARAZIONE DEI MESSAGGI E DEGLI EVENTI


//Messaggi definiti dal BasicRobot
Request 	engage				: 	engage(OWNER,STEPTIME)
Reply 		engagedone			:	engagedone(ARG) for engage
Reply 		engagerefused		: 	engagerefused(ARG) for engage

Dispatch 	disengage			: 	disengage(ARG)

Dispatch 	cmd					:	cmd(MOVE)  
Dispatch 	end					: 	end(ARG)
Request 	step				: 	step(TIME)
Reply 		stepdone			: 	stepdone(V) for step     
Reply 		stepfailed			: 	stepfailed(DURATION, CAUSE) for step
 
Request 	doplan				: 	doplan(PATH,OWNER,STEPTIME)
Reply 		doplandone			: 	doplandone(ARG) for doplan
Reply 		doplanfailed		:	doplanfailed(ARG) for doplan

Request 	moverobot			:	moverobot(TARGETX, TARGETY)
Reply 		moverobotdone		: 	moverobotok(ARG) for moverobot
Reply 		moverobotfailed		: 	moverobotfailed(PLANDONE,PLANTODO) for moverobot

Dispatch 	setrobotstate		: 	setpos(X,Y,D)
Dispatch 	setdirection		: 	dir(D) // up, down, left, right 
 
Request 	getrobotstate		: 	getrobotstate(ARG)
Reply 		robotstate			: 	robotstate(POS,DIR) for getrobotstate 


//Quando il truck driver fa una richiesta di store con un certo peso
Request storerequest       : storerequest(FW)
Reply ticketAccepted :ticketAccepted(TICKETNUMBER) for storerequest
Reply replyTicketDenied: ticketDenied(ARG) for storerequest

//Quando il truck driver arriva e chiede di scaricare immettendo il TICKETNUMBER
Request dischargefood  : dischargefood(TICKETNUM)
Reply replyChargeTaken : replyChargeTaken(ARG) for dischargefood
Reply replyTicketExpired:  replyTicketExpired(ARG) for dischargefood
 


//MESSAGI TRA IL TRANSPORT TROLLEY E il COLD STORAGE 
//manda trolley a servire un truck (da idle a serving)
Dispatch dischargeTrolley : dischargeTrolley(TICKETID)
//Dispatch truckArrived : truckArrived(TICKETID)
Dispatch chargeTaken : chargeTaken(TICKETID)
//quando il trolley Ã¨ alla coldRoom scarica aggiornando il peso (da serving a idle/serving)
Request discharged_trolley : discharged_trolley(TICKETID)
Reply idle_trolley : idle_trolley(D) for discharged_trolley
Reply serve_newtruck : serve_newtruck(TICKETID) for discharged_trolley



//richiedi se puo prenotare KG chilogrammi alla coldroom
Request spaceCheck : spaceCheck(KG)
Reply space_insufficient : space_insufficient(D) for spaceCheck
Reply space_reserved : space_reserved(D) for spaceCheck

Dispatch stored_food : stored_food(KG)


//dopo l'engagement del basic robot, lo mandi in home per iniziare ad attendere comandi
Dispatch gohome : gohome(ARG)

//trolley comunica alla ColdStorage che Ã¨ all'indoor, libera il passaggio
Dispatch trolley_isindoor : trolley_isindoor(D)

Event alarm:alarm(X)
Event resume:resume(ARG)


//DICHIARAZIONE DEI CONTESTI
Context ctxcoldstorageservice ip [host="localhost" port=8055]  
Context ctxbasicrobot ip [host="127.0.0.1" port=8020]

 
QActor coldstorageservice context ctxcoldstorageservice{
	[#
	var Trolley_is_working : Boolean = false;
	var	KgtoLoad : Int = 0;
	var	Expiration : Long = 10000;
	var servingTicket : Int = 0; 
	var QUEUED_TICKET : Int = 0;
	var TICKETNUM : Int = 0;
	#]

	//---------------------------------------------------------------------------------------------------------------
	//INITIALIZE THE COLD STORAGE SERVICE 
	State s0 initial {
		println("$name ) waiting for a new message...") color black
		discardMsg Off
	  } Transition t0
	    whenRequest  storerequest->handleStoreRequest
	    whenRequest dischargefood->handleDischargeRequest
	    whenRequest discharged_trolley ->handleTrolley_atColdroom
	    whenMsg trolley_isindoor -> clearIndoor
	    whenMsg chargeTaken-> handleChargeTaken
	
	 	//-------------------------------------------------------------------------------------------------------------
 	//ASK COLD ROOM HOW MANY KG ARE ALREADY INSIDE
	State handleChargeTaken{
		onMsg(chargeTaken : chargeTaken(TICKETID)){
		 	println("il TT ha preso il carico, dico al Truck che puo andare via ") color black
	    	replyTo dischargefood with replyChargeTaken : replyChargeTaken(ARG)
	    }
		
	}Goto s0
 	//-------------------------------------------------------------------------------------------------------------
 	//ASK COLD ROOM HOW MANY KG ARE ALREADY INSIDE
	State handleStoreRequest{
		println("$name ) handle store request") color black
			onMsg(storerequest:storerequest(KG)){
				[#
					KgtoLoad = payloadArg(0).toInt();
				#]
				 
			 println("$name ) asking to coldRoom") color black
		    request coldroom -m spaceCheck : spaceCheck($KgtoLoad)
		    }
	} Transition t0
	whenReply space_reserved -> handleTicketGeneration
	whenReply space_insufficient -> refuseStoreReq   
    
//------------------------------------------------------------------------------------------------------------------    

	State refuseStoreReq{
			replyTo storerequest with replyTicketDenied : ticketDenied(D)
			println("$name ) ticket denied, not enough space.") 
		
	}Goto s0 
//------------------------------------------------------------------------------------------------------------------    
   //TICKET GENERATION AND CURRENT LOAD CONTROL
  State handleTicketGeneration{
  			println("$name ) handle ticket gen") color black
  	
    onMsg( space_reserved : space_reserved(D) ){
    	[#
		    var TICKETCODE = "TICKET_NEW"; 
		    var TIMESTAMP = "timestamp"; 	
		    
    		#] 
    		replyTo storerequest with ticketAccepted : ticketAccepted($TICKETCODE,$TIMESTAMP)
    		println("$name ) ticket accepted! Ticket $TICKETCODE emitted. ") color magenta
    	}
    } Goto s0  
  
  
  
   //------------------------------------- ----------------------------------------------------------------------------
   //DISCHARGE AND TICKET CHECKING
  State handleDischargeRequest{
  			println("$name ) handle discarge req") color black
  	
	    onMsg( dischargefood : dischargefood(TICKETNUM) ){
	      [# 
	      	TICKETNUM = payloadArg(0).toInt();
			var Expired : Boolean = (if (TICKETNUM == 0 ) true else false);
	      #]
	      if [# !Expired  && !Trolley_is_working#]{
	      	println("$name ) Sending food to the cold room, lazzaro alzati e cammina") color magenta
	      	[#
	      		Trolley_is_working=true;
	      		servingTicket = TICKETNUM;
	      		
	      	#]
	      	forward transporttrolley -m dischargeTrolley : dischargeTrolley($TICKETNUM) 
	      }
	      else { 
	      	if [# !Expired #]{
		      	println("$name ) Truck is already serving another truck, let's queue the ticket $TICKETNUM") color magenta
		      	[#
		      		QUEUED_TICKET=TICKETNUM;
		      	#]
		      	println("$name ) ticket in coda $QUEUED_TICKET") color magenta
		      	
	      	}
	      	else { println("$name ) The ticket has expired... sending notification to SAGui") color magenta
	      		replyTo dischargefood with replyTicketExpired:  replyTicketExpired(ARG)
	      		
	      	}
	   	  }
	    }
    } Goto s0 
  
  State handleTrolley_atColdroom{
  			println("$name ) handle at coldroom") color black
  	
	    onMsg( discharged_trolley : discharged_trolley(TICKETNUM) ){
	    	 println("il tt ha finito di scaricare ho ticket in coda $QUEUED_TICKET") color magenta
	    	[#
	    		
	    		 TICKETNUM = payloadArg(0).toInt();
	    		 val KG : Int = 10;
	    		 
	    	#]
	    	if [# QUEUED_TICKET !== 0 #]{
	    		[#
	    			servingTicket = QUEUED_TICKET;
	    		#]
	    		replyTo discharged_trolley with serve_newtruck : serve_newtruck($QUEUED_TICKET)
	    		println("servi un altro ticket con id $QUEUED_TICKET") color magenta
	    		[#
	    			QUEUED_TICKET=0;
	    		#]
	    	}
	    	else {
	    		println("non ho un altro ticket da darti, torna a casa ") color magenta
	    		[#
	    			Trolley_is_working=false;
	    			#
	    		]
	    		replyTo discharged_trolley with idle_trolley : idle_trolley(D)
	    	}
	    	forward coldroom -m stored_food : stored_food($KG) 
	    }
    }Goto s0
    
    
  State clearIndoor{
	println("$name ) handle clear indoor") color black
  	
    onMsg( trolley_isindoor : trolley_isindoor(D) ){
    println("il TT ha preso il carico, dico al Truck che puo andare via ") color black
    	
      replyTo dischargefood with replyChargeTaken : replyChargeTaken($TICKETNUM)
    }
  } Goto s0
}

QActor serviceaccessgui context ctxcoldstorageservice{
    State s0 initial {

      
  }
}
  
QActor warningdevice context ctxcoldstorageservice{
 State s0 initial {
  } 
}
QActor coldroom context ctxcoldstorageservice{
	
	[#
	//val MAX_STG : Int =Configuration.conf.MAX_STG;
	val MAX_STG : Int = 100;
	var current_STG : Int =0;
	var reserved_STG : Int =0;
	#]
	State s0 initial {
		
		println("$name) I am started with a Maximum $MAX_STG, currently $current_STG !") color blue
		
	}Goto waiting_state
	
	State waiting_state {
		println("$name) Okay then, the storage is $current_STG kg, with a reserved $reserved_STG kg") color blue
	} Transition t2  
	whenRequest spaceCheck  -> check_state
	whenMsg stored_food -> store_state 
	
	
	State check_state{
		onMsg( spaceCheck : spaceCheck(KG)){
			[#
			var Kg : Int = payloadArg(0).toInt();
			#]
			if[# MAX_STG >= current_STG + reserved_STG + Kg#]{
				[#
				reserved_STG+=Kg;
				
				#]
				replyTo spaceCheck with space_reserved : space_reserved($Kg)
							
			}else{
				println("$name) not enough space for reservation...") color blue
				
				replyTo spaceCheck with space_insufficient : space_insufficient(D)
			}
		}	
	} Goto waiting_state
	
	State store_state{
		onMsg( stored_food : stored_food(KG)){
			[#
			var Kg : Int = payloadArg(0).toInt();
			reserved_STG -= Kg;
			current_STG += Kg;
			#]
			println(" $name) Performed the load with success!") color blue
		}
	}Goto waiting_state	
}

QActor alarmdevice context ctxcoldstorageservice{
State s0 initial {
    
  }
}

QActor transporttrolley context ctxcoldstorageservice{
[# var lastState: String = "" 
	var TICKETID:Int= 0
	#
]
	State s0 initial {
		println("$name | init e engage basicrobot") color yellow  
		request basicrobot -m engage : engage(transporttrolley,125)
	}
	Transition 	t0	whenReply engagedone -> engaged
					whenReply engagerefused -> quit
	
	State engaged {
		println("$name | basicrobot engaged") color yellow		
	}
	Goto atHome
	
	State atHome{
		[# lastState = "atHome" #]
		println("$name | basicrobot at Home") color yellow
		
		
	}
	Transition t0 
				whenMsg dischargeTrolley -> goingIndoor

	State goingIndoor {
		printCurrentMessage
		[# lastState = "goingIndoor" #]
		onMsg(dischargeTrolley:dischargeTrolley(TICKETID)){
			[# TICKETID = payloadArg(0).toInt() #]
			println("servendo il ticket $TICKETID") color yellow
			println("$name | vado all'INDOOR") color yellow
			request basicrobot -m moverobot : moverobot (0,4)
		}
		onMsg(serve_newtruck:serve_newtruck(TICKETID)){
			[# TICKETID = payloadArg(0).toInt() #]
			println("servendo il ticket $TICKETID") color yellow
			println("$name | vado all'INDOOR") color yellow
			request basicrobot -m moverobot : moverobot (0,4)
		}
	}
	Transition t0 whenReply moverobotdone -> atIndoor
	whenEvent alarm ->stopped
	
	State atIndoor {
		[# lastState = "atIndoor" #]

		println("$name | sono in INDOOR") color yellow
		println("$name | carico il cibo") color yellow
	}
	Transition t 	whenTime 3000 -> loadDone		// simula azione di carico
	
	State loadDone {		
		forward coldstorageservice -m trolley_isindoor : trolley_isindoor(D) 
		println("$name | cibo caricato") color yellow
		
	}
	Goto goingColdroom
	
	State goingColdroom {
		[# lastState = "goingColdroom" #]
		println("$name | vado verso la cold room") color yellow
		request basicrobot -m moverobot : moverobot (4,3) 
	}
	Transition t0 whenReply moverobotdone -> atColdroom
		whenEvent alarm ->stopped
	
	
	State atColdroom {
		[# lastState = "atColdroom" #]
		println("$name | sono in Cold Room") color yellow		
	}
	Transition t0 whenTime 3000 	-> chargeStored	// simula azione deposito
	
	State chargeStored {
		[# lastState = "chargedStored"  
			#
		]
		println("$name | terminato deposito del ticket $TICKETID. Aspetto istruzioni") color yellow		
		request coldstorageservice -m discharged_trolley: discharged_trolley($TICKETID)
	}
	Transition t0 whenReply idle_trolley -> goingHome
					whenReply serve_newtruck -> goingIndoor
	
	State goingHome{
		[# TICKETID = 0 #]
		
		[# lastState = "goingHome" #]
		println("$name | vado alla posizione HOME") color yellow
		request basicrobot -m moverobot : moverobot (0,0)
	}
	Transition t0 whenReply moverobotdone -> atHome
		whenEvent alarm ->stopped
	
	

	
	State stopped {
		discardMsg On
		println("$name | Sono fermo per ostacolo sonar") color yellow
		println("ultimo stato Ã¨ $lastState") color magenta
	}
	Transition t0 whenEvent resume and [# lastState == "atHome" #] 		-> atHome
				  whenEvent resume and [# lastState == "goingIndoor" #] 	-> goingIndoor
				  whenEvent resume and [# lastState == "atIndoor" #] 	-> atIndoor
				  whenEvent resume and [# lastState == "goingColdroom" #] 	-> goingColdroom
				  whenEvent resume and [# lastState == "atColdroom" #] 	-> atColdroom
				  whenEvent resume and [# lastState == "chargeStored" #] 	-> chargeStored
				  whenEvent resume and [# lastState == "goingHome" #] 		-> goingHome
	
	State quit {
		forward basicrobot -m disengage : disengage(transporttrolley)
		[# System.exit(0) #]
	}
}


// DICHIARAZIONE DEGLI ATTORI
QActor servicestatusgui context ctxcoldstorageservice{

  State s0 initial {
  } 
} 


ExternalQActor basicrobot context ctxbasicrobot


