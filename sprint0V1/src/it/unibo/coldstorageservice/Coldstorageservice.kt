/* Generated by AN DISI Unibo */ 
package it.unibo.coldstorageservice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Coldstorageservice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		 var currentStorage = 0
				val maxStorage=100
				var ready = true
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblack("--- coldStorageService active")
						CommUtils.outblack("currentMsg=${currentMsg}")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="handleStorageRequest",cond=whenRequest("storerequest"))
					transition(edgeName="t01",targetState="handleDiscargeFood",cond=whenRequest("dischargefood"))
				}	 
				state("handleStorageRequest") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("storerequest(FW)"), Term.createTerm("storerequest(FW)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outblack("--- storeRequest arrived")
								
								    		val requestStorage = payloadArg(0).toInt()
								    		val leftStorage = currentStorage - requestStorage
								    		if (leftStorage > 0){
								    			val TICKETNUMBER = "A12345"
								    			currentStorage +=  requestStorage
								answer("storerequest", "replyTicketAccepted", "ticketAccepted($TICKETNUMBER)"   )  
								}else {
								answer("storerequest", "replyTicketDenied", "ticketDenied(denied)"   )  
								} 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
				state("handleDiscargeFood") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("dischargefood(TICKETNUM)"), Term.createTerm("dischargefood(TICKETNUMBER)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outblack("--- dischargefood arrived")
								
								    		val ticketNumber = payloadArg(0)
								    		if (ticketNumber !== "EXPIRED"){
								answer("dischargefood", "replyChargeTaken", "replyChargeTaken(ARG)"   )  
								}else {
								answer("dischargefood", "replyTicketExpired", "replyTicketExpired(ARG)"   )  
								} 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
			}
		}
}
