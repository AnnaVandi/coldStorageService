System system

//store request e ricevi ticket
Request storerequest : storerequest(FW)
Reply requestaccepted     : requestaccepted(TICKETID,TIMESTAMP)
Reply requestdenied : requestdenied(D)

//scarichi esigendo il ticket 
Request dischargefood  : dischargefood(TICKETID)
Reply replyChargeTaken : replyChargeTaken(D)
Reply replyTicketExpired : replyTicketExpired(D)
 

//richiedi se puo prenotare KG chilogrammi alla coldroom
Request spaceCheck : spaceCheck(KG)
Reply space_insufficient : space_insufficient(D)
Reply space_reserved : space_reserved(D)


//manda trolley a servire un truck (da idle a serving)
Dispatch dischargeTrolley : dischargeTrolley(TICKETID)

//quando il trolley è alla coldRoom scarica aggiornando il peso (da serving a idle/serving)
Request discharged_trolley : discharged_trolley(TICKETID)
Reply idle_trolley : idle_trolley(D)
Reply serve_newtruck : serve_newtruck(D)

//dopo l'engagement del basic robot, lo mandi in home per iniziare ad attendere comandi
Dispatch gohome : gohome(ARG)

//trolley comunica alla ColdStorage che è all'indoor, libera il passaggio
Dispatch trolley_isindoor : trolley_isindoor(D)

//robotpos messages
Request moverobot    :  moverobot(TARGETX, TARGETY)
Reply moverobotdone  :  moverobotok(ARG)
Reply moverobotfailed:  moverobotfailed(ARG)


//engaging robotpos
Request engage : engage(ARG)
Reply   engagedone    : engagedone(ARG) 
Reply   engagerefused : engagerefused(ARG)


//internal - external status messages
Request robotposition : robotposition(D)
Reply replyposition : replyposition(X,Y)

Request currentstatusrequest : currentstatusrequest(D)
Reply replystatus : replystatus(X,Y,WEIGHT)

Request currentloadrequest : currentloadrequest(ARG)
Reply replycurrentload : replycurrentload(WEIGHT)



Context ctxColdStorageService ip [host="localhost" port=8056]
Context ctxBasicRobot ip [host="localhost" port=8059]

QActor serviceaccessgui context ctxColdStorageService{

  State s0 initial {
  }
}
QActor warningdevice context ctxColdStorageService{
 State s0 initial {
  }
}
QActor alarmdevice context ctxColdStorageService{
	State s0 initial {
	    
	  }
}

QActor coldroom context ctxColdStorageService{
	State s0 initial {  
	  }
}
QActor servicestatusgui context ctxColdStorageService{
    State s0 initial {
      request coldstorageservice -m dischargefood : dischargefood(AKAKSDJHFHJDEA)
      request coldstorageservice -m storerequest  : storerequest(FW)
      
  }
}
ExternalQActor basicrobot context ctxBasicRobot





QActor coldstorageservice context ctxColdStorageService{
	[#
	var Trolley_is_working : Boolean = false;
	var	KgtoLoad : Long = 0;
	var	Expiration : Long = 100;
	var List = tickets.TicketList(Expiration); 	
	var servingTicket = tickets.Ticket();
	var queuedTicket = tickets.Ticket();
	#]
	
	//---------------------------------------------------------------------------------------------------------------
	//INITIALIZE THE COLD STORAGE SERVICE
	State s0 initial {
		println("$name ) waiting for a new message...") color black
		discardMsg Off
		
	  } Transition t0
	    whenRequest  storerequest->handleStoreRequest
	    whenRequest dischargefood->handleDischargeRequest
	    whenRequest discharged_trolley ->handleTrolley_atColdroom
	    whenMsg trolley_isindoor -> clearIndoor
	
	
 	//-------------------------------------------------------------------------------------------------------------
 	//ASK COLD ROOM HOW MANY KG ARE ALREADY INSIDE
	State handleStoreRequest{
		onMsg( storerequest : storerequest(FW) ){
			[#
				KgtoLoad = payloadArg(0).toLong();
			#]
			
		 }
	    request coldroom -m spaceCheck : spaceCheck($KgtoLoad)
	} Transition t0
	whenReply space_reserved -> handleTicketGeneration
	whenReply space_insufficient -> refuseStoreReq   
    
//------------------------------------------------------------------------------------------------------------------    

	State refuseStoreReq{
			replyTo storerequest with requestdenied : requestdenied(D)
			println("$name ) ticket denied, not enough space.") 
		
	}Goto s0 
//------------------------------------------------------------------------------------------------------------------    
   //TICKET GENERATION AND CURRENT LOAD CONTROL
  State handleTicketGeneration{
    onMsg( space_reserved : space_reserved(D) ){
    	[#
			var ticket=List.createTicket(KgtoLoad);
		    var TICKETCODE = ticket.getTicketNumber;
		    var TIMESTAMP = ticket.getTimestamp(); 	
		    
    		#]
    		replyTo storerequest with requestaccepted : requestaccepted($TICKETCODE,$TIMESTAMP)
    		println("$name ) ticket accepted! Ticket $TICKETCODE emitted. ") color magenta
    	}
    } Goto s0 
  
  
  
   //-----------------------------------------------------------------------------------------------------------------
   //DISCHARGE AND TICKET CHECKING
  State handleDischargeRequest{
	    onMsg( dischargefood : dischargefood(TICKETNUM) ){
	      [#
	      	var Ticketnum = payloadArg(0);
	      	Ticket ticket = List.getTicket(Ticketnum);
	      	boolean Expired = List.isExpired(ticket);
	      #]
	      if [# !Expired  && !Trolley_is_working#]{
	      	println("$name ) Sending food to the cold room, lazzaro alzati e cammina") color magenta
	      	[#
	      		Trolley_is_working=true;
	      		servingTicket= ticket;
	      		
	      	#]
	      	forward transporttrolley -m dischargeTrolley : dischargeTrolley(Ticketnum) 
	      }
	      else { 
	      	if [# !Expired #]{
		      	println("$name ) Truck is already serving another truck, let's queue the ticket $Ticketnum") color magenta
		      	[#
		      		queuedTicket=ticket;
		      	#]
	      	}
	      	else { println("$name ) The ticket has expired... sending notification to SAGui") color magenta}
	   	  }
	    }
    } Goto s0 
  
  State handleTrolley_atColdroom{
	    onMsg( discharged_trolley : discharged_trolley(TICKETNUM) ){
	    	[#
	    		Ticketnum= payloadArg(0);
	    	#]
	    	if [# servingTicket.getTicketNumber() == Ticketnum  && queuedTicket.getTicketNumber() != 0 #]{
	    		[#
	    		servingTicket = queuedTicket;
	    		ServingId = servingTicket.getTicketNumber;
	    		queuedTicket.setStatus(0);	
	    		queuedTicket.setTicketNumber(0);
	    		queuedTicket.setKgToStore(0);
	    		queuedTicket.setTimestamp(0);
	    			
	    		#]
	    		replyTo discharged_trolley with serve_newtruck : serve_newtruck($ServingId)
	    	}
	    	else {
	    		if[# servingTicket.getTicketNumber() == Ticketnum #]{
	    			[#
	    			servingTicket.setStatus(0);	
		    		servingTicket.setTicketNumber(0);
		    		servingTicket.setKgToStore(0);
		    		servingTicket.setTimestamp(0);
		    		Trolley_is_working = false;
		    		#]
		    		replyTo discharged_trolley with idle_trolley : idle_trolley(D)
	    		}
	    	
		    	else{
		    		println("$name) i don't know what happened but it is fucked up, not corresponding serving ticket")	
		    	}
	    	}
	    }
    }Goto s0
  State clearIndoor{
    onMsg( storerequest : storerequest(FW) ){
    	
      replyTo dischargefood with replyChargeTaken : replyChargeTaken($Ticketnum)
      
    }
  } Goto s0
}



QActor transporttrolley context ctxColdStorageService{
	[#
	val (HomeX, HomeY) = Pair(0, 0);
	val (IndoorX, IndoorY) = Pair(0, 4);
	val (ColdRoomX, ColdRoomY) = Pair(4, 3);
	var LoadTrolley : Long = 0;
	#]
	  	
  State terminating {
  	println("$name ) Robot already engaged!")
  }
  
  State s0 initial {  
	discardMsg Off
	println("$name ) has started, now let's engage the robot!")
  	request basicrobot -m engage : engage(ARG)
  } Transition t0
//  whenReply engagedone -> goinghome
  whenReply engagerefused -> terminating
  
  State isHome {
  	println("$name ) Robot in home waiting for trucks!")
  }
  //whenMsg dischargeTrolley -> GoingOutdoor
  
  State goinghome {
  	println("$name) Sending Robot to Home")
  	request basicrobot -m moverobot : moverobot(HomeX,HomeY)
  } Transition t2
  whenReply moverobotdone ->isHome 
 // whenReply moverobotfailed -> ErrorState 
  State goingColdroom{
  	
  }
   State errorState{
   	
   }
  
    
  State goingOutdoor {
  	println("$name ) Robot has received a discharge request, let's go to the Outdoor.")
  	onMsg(dischargeTrolley : dischargeTrolley(WEIGHT)){
  		[#
  		LoadTrolley = payloadArg(0);
  		#]
  	} 
  	request basicrobot -m moverobot : moverobot(OutdoorX,OutdoorY)
  } Transition t3 
  whenReply moverobotdone -> goingColdroom
  whenReply moverobotfailed -> errorState
  
  State termination {
  	println("$name ) Robot already engaged!")
  } Goto s0 
  
}


