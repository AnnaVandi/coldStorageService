/* Generated by AN DISI Unibo */ 
package it.unibo.coldstorageservice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Coldstorageservice ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		
			var Trolley_is_working : Boolean = false;
			var	KgtoLoad : Int = 0;
			var	Expiration : Long = 10000;
			var servingTicket : Int = 0; 
			var QUEUED_TICKET : Int = 0;
			var TICKETNUM : Int = 0;
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblack("$name ) waiting for a new message...")
						discardMessages = false
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="handleStoreRequest",cond=whenRequest("storerequest"))
					transition(edgeName="t01",targetState="handleDischargeRequest",cond=whenRequest("dischargefood"))
					transition(edgeName="t02",targetState="handleTrolley_atColdroom",cond=whenRequest("discharged_trolley"))
					transition(edgeName="t03",targetState="clearIndoor",cond=whenDispatch("trolley_isindoor"))
					transition(edgeName="t04",targetState="handleChargeTaken",cond=whenDispatch("chargeTaken"))
				}	 
				state("handleChargeTaken") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("chargeTaken(TICKETID)"), Term.createTerm("chargeTaken(TICKETID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outblack("il TT ha preso il carico, dico al Truck che puo andare via ")
								answer("dischargefood", "replyChargeTaken", "replyChargeTaken(ARG)"   )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
				state("handleStoreRequest") { //this:State
					action { //it:State
						CommUtils.outblack("$name ) handle store request")
						if( checkMsgContent( Term.createTerm("storerequest(FW)"), Term.createTerm("storerequest(KG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
													KgtoLoad = payloadArg(0).toInt();
								CommUtils.outblack("$name ) asking to coldRoom")
								request("spaceCheck", "spaceCheck($KgtoLoad)" ,"coldroom" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t05",targetState="handleTicketGeneration",cond=whenReply("space_reserved"))
					transition(edgeName="t06",targetState="refuseStoreReq",cond=whenReply("space_insufficient"))
				}	 
				state("refuseStoreReq") { //this:State
					action { //it:State
						answer("storerequest", "replyTicketDenied", "ticketDenied(D)"   )  
						CommUtils.outblack("$name ) ticket denied, not enough space.")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
				state("handleTicketGeneration") { //this:State
					action { //it:State
						CommUtils.outblack("$name ) handle ticket gen")
						if( checkMsgContent( Term.createTerm("space_reserved(D)"), Term.createTerm("space_reserved(D)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
										    var TICKETCODE = "TICKET_NEW"; 
										    var TIMESTAMP = "timestamp"; 	
										    
								answer("storerequest", "ticketAccepted", "ticketAccepted($TICKETCODE,$TIMESTAMP)"   )  
								CommUtils.outmagenta("$name ) ticket accepted! Ticket $TICKETCODE emitted. ")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
				state("handleDischargeRequest") { //this:State
					action { //it:State
						CommUtils.outblack("$name ) handle discarge req")
						if( checkMsgContent( Term.createTerm("dischargefood(TICKETNUM)"), Term.createTerm("dischargefood(TICKETNUM)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
									      	TICKETNUM = payloadArg(0).toInt();
											var Expired : Boolean = (if (TICKETNUM == 0 ) true else false);
								if(  !Expired  && !Trolley_is_working 
								 ){CommUtils.outmagenta("$name ) Sending food to the cold room, lazzaro alzati e cammina")
								
									      		Trolley_is_working=true;
									      		servingTicket = TICKETNUM;
									      		
								forward("dischargeTrolley", "dischargeTrolley($TICKETNUM)" ,"transporttrolley" ) 
								}
								else
								 {if(  !Expired  
								  ){CommUtils.outmagenta("$name ) Truck is already serving another truck, let's queue the ticket $TICKETNUM")
								 
								 		      		QUEUED_TICKET=TICKETNUM;
								 CommUtils.outmagenta("$name ) ticket in coda $QUEUED_TICKET")
								 }
								 else
								  {CommUtils.outmagenta("$name ) The ticket has expired... sending notification to SAGui")
								  answer("dischargefood", "replyTicketExpired", "replyTicketExpired(ARG)"   )  
								  }
								 }
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
				state("handleTrolley_atColdroom") { //this:State
					action { //it:State
						CommUtils.outblack("$name ) handle at coldroom")
						if( checkMsgContent( Term.createTerm("discharged_trolley(TICKETID)"), Term.createTerm("discharged_trolley(TICKETNUM)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outmagenta("il tt ha finito di scaricare ho ticket in coda $QUEUED_TICKET")
								
									    		
									    		 TICKETNUM = payloadArg(0).toInt();
									    		 val KG : Int = 10;
									    		 
								if(  QUEUED_TICKET !== 0  
								 ){
									    			servingTicket = QUEUED_TICKET;
								answer("discharged_trolley", "serve_newtruck", "serve_newtruck($QUEUED_TICKET)"   )  
								CommUtils.outmagenta("servi un altro ticket con id $QUEUED_TICKET")
								
									    			QUEUED_TICKET=0;
								}
								else
								 {CommUtils.outmagenta("non ho un altro ticket da darti, torna a casa ")
								 
								 	    			Trolley_is_working=false;
								 answer("discharged_trolley", "idle_trolley", "idle_trolley(D)"   )  
								 }
								forward("stored_food", "stored_food($KG)" ,"coldroom" ) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
				state("clearIndoor") { //this:State
					action { //it:State
						CommUtils.outblack("$name ) handle clear indoor")
						if( checkMsgContent( Term.createTerm("trolley_isindoor(D)"), Term.createTerm("trolley_isindoor(D)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outblack("il TT ha preso il carico, dico al Truck che puo andare via ")
								answer("dischargefood", "replyChargeTaken", "replyChargeTaken($TICKETNUM)"   )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
			}
		}
} 
